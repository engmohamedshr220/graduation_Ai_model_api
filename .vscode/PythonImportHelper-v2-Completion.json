[
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "preprocess_input",
        "importPath": "keras.applications.vgg16",
        "description": "keras.applications.vgg16",
        "isExtraImport": true,
        "detail": "keras.applications.vgg16",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "keras.preprocessing",
        "description": "keras.preprocessing",
        "isExtraImport": true,
        "detail": "keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "load_img",
        "importPath": "tensorflow.keras.utils",
        "description": "tensorflow.keras.utils",
        "isExtraImport": true,
        "detail": "tensorflow.keras.utils",
        "documentation": {}
    },
    {
        "label": "img_to_array",
        "importPath": "tensorflow.keras.utils",
        "description": "tensorflow.keras.utils",
        "isExtraImport": true,
        "detail": "tensorflow.keras.utils",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "model_predict",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def model_predict(img_path, model):\n    # Preprocessing the image\n    img = load_img(img_path, target_size=(224, 224))\n    x = img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n    x = preprocess_input(x)\n    y = model.predict(x)\n    return np.argmax(y)\n@app.route('/', methods=['GET'])\ndef index():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    # Main page\n    return render_template('index.html')\n@app.route('/predict', methods=['GET', 'POST'])\ndef predict():\n    if request.method == 'POST':\n        # Get the file from post request\n        f = request.files['file']\n        # Save the file to ./uploads\n        file_path = os.path.join(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def predict():\n    if request.method == 'POST':\n        # Get the file from post request\n        f = request.files['file']\n        # Save the file to ./uploads\n        file_path = os.path.join(\n             secure_filename(f.filename))\n        f.save(file_path)\n        # Make prediction\n        preds = model_predict(file_path, model)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n# Model saved with Keras model.save()\nMODEL_PATH = 'breast_cancer_model.h5'\n# Load your trained model\nmodel = load_model(MODEL_PATH)\n# print('Model loaded. Start serving...')\nprint('Model loaded. Check http://127.0.0.1:5001/')\n#function for processing the input image abd prediction\ndef model_predict(img_path, model):\n    # Preprocessing the image",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MODEL_PATH",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "MODEL_PATH = 'breast_cancer_model.h5'\n# Load your trained model\nmodel = load_model(MODEL_PATH)\n# print('Model loaded. Start serving...')\nprint('Model loaded. Check http://127.0.0.1:5001/')\n#function for processing the input image abd prediction\ndef model_predict(img_path, model):\n    # Preprocessing the image\n    img = load_img(img_path, target_size=(224, 224))\n    x = img_to_array(img)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model = load_model(MODEL_PATH)\n# print('Model loaded. Start serving...')\nprint('Model loaded. Check http://127.0.0.1:5001/')\n#function for processing the input image abd prediction\ndef model_predict(img_path, model):\n    # Preprocessing the image\n    img = load_img(img_path, target_size=(224, 224))\n    x = img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n    x = preprocess_input(x)",
        "detail": "app",
        "documentation": {}
    }
]